configure_file(
    input:  'libslic3r_version.h.in',
    output: 'libslic3r_version.h',
    configuration: config,
)

libslic3r_sources = [
    # 'GCode/PressureEqualizer.cpp',
    # 'GCodeSender.cpp',
    # 'SLA/SupportTreeIGL.cpp',
    'AppConfig.cpp',
    'Arrange.cpp',
    'BoundingBox.cpp',
    'BridgeDetector.cpp',
    'Brim.cpp',
    'ClipperUtils.cpp',
    'Config.cpp',
    'CustomGCode.cpp',
    'EdgeGrid.cpp',
    'ElephantFootCompensation.cpp',
    'ExPolygon.cpp',
    'ExPolygonCollection.cpp',
    'Extruder.cpp',
    'ExtrusionEntity.cpp',
    'ExtrusionEntityCollection.cpp',
    'ExtrusionSimulator.cpp',
    'Fill/Fill.cpp',
    'Fill/Fill3DHoneycomb.cpp',
    'Fill/FillAdaptive.cpp',
    'Fill/FillBase.cpp',
    'Fill/FillConcentric.cpp',
    'Fill/FillGyroid.cpp',
    'Fill/FillHoneycomb.cpp',
    'Fill/FillLine.cpp',
    'Fill/FillPlanePath.cpp',
    'Fill/FillRectilinear.cpp',
    'Flow.cpp',
    'Format/3mf.cpp',
    'Format/AMF.cpp',
    'Format/OBJ.cpp',
    'Format/objparser.cpp',
    'Format/PRUS.cpp',
    'Format/SL1.cpp',
    'Format/STL.cpp',
    'GCode.cpp',
    'GCode/AvoidCrossingPerimeters.cpp',
    'GCode/CoolingBuffer.cpp',
    'GCode/GCodeProcessor.cpp',
    'GCode/PostProcessor.cpp',
    'GCode/PrintExtents.cpp',
    'GCode/SeamPlacer.cpp',
    'GCode/SpiralVase.cpp',
    'GCode/ThumbnailData.cpp',
    'GCode/ToolOrdering.cpp',
    'GCode/WipeTower.cpp',
    'GCodeReader.cpp',
    'GCodeWriter.cpp',
    'Geometry.cpp',
    'Layer.cpp',
    'LayerRegion.cpp',
    'LibraryCheck.cpp',
    'libslic3r.h',
    'Line.cpp',
    'MinAreaBoundingBox.cpp',
    'miniz_extension.cpp',
    'Model.cpp',
    'ModelArrange.cpp',
    'MultiPoint.cpp',
    'MutablePolygon.cpp',
    'ObjectID.cpp',
    'pchheader.cpp',
    'PerimeterGenerator.cpp',
    'PlaceholderParser.cpp',
    'Platform.cpp',
    'PNGReadWrite.cpp',
    'Point.cpp',
    'Polygon.cpp',
    'PolygonTrimmer.cpp',
    'Polyline.cpp',
    'Preset.cpp',
    'PresetBundle.cpp',
    'Print.cpp',
    'PrintBase.cpp',
    'PrintConfig.cpp',
    'PrintObject.cpp',
    'PrintRegion.cpp',
    'Semver.cpp',
    'ShortestPath.cpp',
    'SimplifyMesh.cpp',
    'SLA/Clustering.cpp',
    'SLA/ConcaveHull.cpp',
    'SLA/Contour3D.cpp',
    'SLA/Hollowing.cpp',
    'SLA/IndexedMesh.cpp',
    'SLA/Pad.cpp',
    'SLA/RasterBase.cpp',
    'SLA/RasterToPolygons.cpp',
    'SLA/Rotfinder.cpp',
    'SLA/SpatIndex.cpp',
    'SLA/SupportPointGenerator.cpp',
    'SLA/SupportTree.cpp',
    'SLA/SupportTreeBuilder.cpp',
    'SLA/SupportTreeBuildsteps.cpp',
    'SLA/SupportTreeMesher.cpp',
    'SLAPrint.cpp',
    'SLAPrintSteps.cpp',
    'SlicesToTriangleMesh.cpp',
    'Slicing.cpp',
    'SlicingAdaptive.cpp',
    'SupportMaterial.cpp',
    'Surface.cpp',
    'SurfaceCollection.cpp',
    'SVG.cpp',
    'Tesselate.cpp',
    'Thread.cpp',
    'Time.cpp',
    'TriangleMesh.cpp',
    'TriangleSelector.cpp',
    'TriangulateWall.cpp',
    'utils.cpp',
    'VoronoiOffset.cpp',
    'Zipper.cpp',
]

if openvdb.found()
    libslic3r_sources += 'OpenVDBUtils.cpp'
endif

# TODO:
# libslic3r_sources += '${OpenVDBUtils_SOURCES}',

if true
    libslic3r_sources += 'MeshBoolean.cpp',
endif

libslic3r_dependencies = [
    eigen,
    clipper,
    libqhull,
    libigl,
    miniz,
    libnest2d,
    glu_libtess,
    boost,
]

lib_libslic3r = shared_library('slic3r',
    libslic3r_sources,
    include_directories: include_src,
    cpp_args: [
        '-DUSE_TBB',
        '-DTBB_USE_CAPTURED_EXCEPTION=0',
        slic3r_gui_args,
    ],
    dependencies: libslic3r_dependencies,
)

libslic3r = declare_dependency(
    link_with: lib_libslic3r,
    include_directories: [
        include_src,
        include_directories('.'),
    ],
    dependencies: libslic3r_dependencies,
)
